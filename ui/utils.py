# ui/utils.py

# Ghi ch√∫: File n√†y ch·ª©a c√°c h√†m ti·ªán √≠ch ƒë∆∞·ª£c s·ª≠ d·ª•ng tr√™n nhi·ªÅu trang.
# Vi·ªác t√°ch c√°c h√†m n√†y ra gi√∫p tr√°nh l·∫∑p code v√† l√†m cho m√£ ngu·ªìn trang ch√≠nh
# (app.py, workspace.py) s·∫°ch s·∫Ω, d·ªÖ ƒë·ªçc h∆°n.

import streamlit as st
from core.services import service_manager
# S·ª≠a ƒë·ªïi: Ch·ªâ import t√™n h√†m, kh√¥ng g·ªçi tr·ª±c ti·∫øp t·ª´ ƒë√¢y
from .onboarding import onboarding_popup, help_button
from config import DEFAULT_THEME

def apply_theme():
    """H√†m inject CSS class v√†o body ƒë·ªÉ √°p d·ª•ng theme S√°ng/T·ªëi."""
    theme = st.session_state.get('theme', DEFAULT_THEME)
    st.markdown(
        f"""
        <script>
            document.querySelector('body').classList.remove('light-theme', 'dark-theme');
            document.querySelector('body').classList.add('{theme}-theme');
        </script>
        """,
        unsafe_allow_html=True
    )

def theme_toggle_button():
    """H√†m t·∫°o n√∫t chuy·ªÉn ƒë·ªïi theme ·ªü g√≥c tr√™n b√™n ph·∫£i."""
    if 'theme' not in st.session_state:
        st.session_state.theme = DEFAULT_THEME
    
    icon = "üåë" if st.session_state.theme == 'dark' else "üí°"
    tooltip = "Chuy·ªÉn sang Light Mode" if st.session_state.theme == 'dark' else "Chuy·ªÉn sang Dark Mode"

    # N√∫t ·∫©n c·ªßa Streamlit ƒë·ªÉ x·ª≠ l√Ω logic trong Python
    if st.button("Theme Toggle Callback", key="theme_toggle_callback", help="Internal callback"):
        st.session_state.theme = "light" if st.session_state.theme == "dark" else "dark"
        st.rerun()

    st.markdown(f"""
        <style>
            .theme-toggle-container {{ position: fixed; top: 1rem; right: 1.5rem; z-index: 9999; }}
            .theme-toggle-button {{
                background: var(--secondary-bg); color: var(--text-color); border: 1px solid var(--border-color);
                border-radius: 50%; width: 45px; height: 45px; font-size: 24px; cursor: pointer;
                transition: all 0.2s ease;
            }}
            .theme-toggle-button:hover {{ transform: scale(1.1) rotate(15deg); border-color: var(--primary-color); }}
            button[key="theme_toggle_callback"] {{ display: none; }}
        </style>
        <div class="theme-toggle-container">
            <button id="theme-toggle-btn" class="theme-toggle-button" title="{tooltip}"
                    onclick="window.parent.document.querySelector('[data-testid=\"stButton\"][key=\"theme_toggle_callback\"]').click();">
                {icon}
            </button>
        </div>
    """, unsafe_allow_html=True)


def page_setup(page_title: str, page_icon: str, initial_sidebar_state: str = "expanded"):
    """
    H√†m thi·∫øt l·∫≠p trang to√†n di·ªán, ƒë∆∞·ª£c g·ªçi ·ªü ƒë·∫ßu m·ªói file trang.
    """
    st.set_page_config(
        page_title=page_title,
        page_icon=page_icon,
        layout="wide",
        initial_sidebar_state=initial_sidebar_state
    )

    # √Åp d·ª•ng theme v√† CSS t√πy ch·ªânh
    apply_theme()
    with open("styles.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

    # --- S·ª¨A ƒê·ªîI QUAN TR·ªåNG ƒê·ªÇ S·ª¨A L·ªñI ---
    # Kh·ªüi t·∫°o c√°c state c·∫ßn thi·∫øt cho ·ª©ng d·ª•ng.
    if "courses" not in st.session_state:
        st.session_state.courses = service_manager.list_courses()
    
    if "onboarding_complete" not in st.session_state:
        st.session_state.onboarding_complete = False
        # NEW: ƒê·∫∑t m·ªôt "c·ªù" ƒë·ªÉ b√°o hi·ªáu cho app.py r·∫±ng c·∫ßn hi·ªÉn th·ªã popup.
        # C·ªù n√†y ch·ªâ ƒë∆∞·ª£c ƒë·∫∑t l√† True M·ªòT L·∫¶N DUY NH·∫§T trong su·ªët phi√™n l√†m vi·ªác.
        st.session_state.show_onboarding_popup = True 
    
    # Hi·ªÉn th·ªã c√°c n√∫t c·ªë ƒë·ªãnh tr√™n giao di·ªán.
    help_button()
    theme_toggle_button()

    # X√ìA HO√ÄN TO√ÄN LOGIC G·ªåI POPUP T·ª™ ƒê√ÇY
    # Vi·ªác g·ªçi popup s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü m·ªôt c·∫•p cao h∆°n (trong app.py).
