# ui/utils.py

# Ghi ch√∫: File n√†y ch·ª©a c√°c h√†m ti·ªán √≠ch ƒë∆∞·ª£c s·ª≠ d·ª•ng tr√™n nhi·ªÅu trang.
# Vi·ªác t√°ch c√°c h√†m n√†y ra gi√∫p tr√°nh l·∫∑p code v√† l√†m cho m√£ ngu·ªìn trang ch√≠nh
# (app.py, pages/workspace.py) s·∫°ch s·∫Ω, d·ªÖ ƒë·ªçc v√† b·∫£o tr√¨.

import streamlit as st
from core.services import service_manager
from .onboarding import onboarding_popup
from config import DEFAULT_THEME

def apply_theme():
    """
    H√†m n√†y inject m·ªôt ƒëo·∫°n m√£ JavaScript nh·ªè v√†o trang ƒë·ªÉ th√™m CSS class
    v√†o th·∫ª <body>. ƒêi·ªÅu n√†y cho ph√©p file styles.css √°p d·ª•ng c√°c bi·∫øn m√†u
    t∆∞∆°ng ·ª©ng cho ch·∫ø ƒë·ªô S√°ng (light-theme) ho·∫∑c T·ªëi (dark-theme).
    """
    theme = st.session_state.get('theme', DEFAULT_THEME)
    st.markdown(
        f"""
        <script>
            document.querySelector('body').classList.remove('light-theme', 'dark-theme');
            document.querySelector('body').classList.add('{theme}-theme');
        </script>
        """,
        unsafe_allow_html=True
    )

def theme_toggle_button():
    """
    H√†m n√†y t·∫°o n√∫t chuy·ªÉn ƒë·ªïi theme ·ªü g√≥c tr√™n b√™n ph·∫£i.
    N√≥ s·ª≠ d·ª•ng m·ªôt m·∫πo "n√∫t ·∫©n" ƒë·ªÉ k·∫øt h·ª£p giao di·ªán HTML/CSS t√πy ch·ªânh
    v·ªõi logic x·ª≠ l√Ω s·ª± ki·ªán c·ªßa Python trong Streamlit.
    """
    if 'theme' not in st.session_state:
        st.session_state.theme = DEFAULT_THEME
    
    # X√°c ƒë·ªãnh icon v√† tooltip d·ª±a tr√™n theme hi·ªán t·∫°i
    icon = "üåë" if st.session_state.theme == 'dark' else "üí°"
    tooltip = "Chuy·ªÉn sang Light Mode" if st.session_state.theme == 'dark' else "Chuy·ªÉn sang Dark Mode"

    # ƒê√¢y l√† n√∫t ·∫©n c·ªßa Streamlit, n√≥ s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi JavaScript.
    if st.button("Theme Toggle Callback", key="theme_toggle_callback", help="Internal callback for theme switching"):
        st.session_state.theme = "light" if st.session_state.theme == "dark" else "dark"
        st.rerun()

    # ƒê√¢y l√† n√∫t b·∫•m th·∫≠t m√† ng∆∞·ªùi d√πng nh√¨n th·∫•y, ƒë∆∞·ª£c t·∫°o b·∫±ng HTML/CSS.
    st.markdown(f"""
        <style>
            .theme-toggle-container {{ position: fixed; top: 1rem; right: 1.5rem; z-index: 9999; }}
            .theme-toggle-button {{
                background: var(--secondary-bg); color: var(--text-color); border: 1px solid var(--border-color);
                border-radius: 50%; width: 45px; height: 45px; font-size: 24px; cursor: pointer;
                transition: all 0.2s ease;
            }}
            .theme-toggle-button:hover {{ transform: scale(1.1) rotate(15deg); border-color: var(--primary-color); }}
            /* ·∫®n n√∫t callback c·ªßa Streamlit kh·ªèi giao di·ªán */
            button[key="theme_toggle_callback"] {{ display: none; }}
        </style>
        <div class="theme-toggle-container">
            <button id="theme-toggle-btn" class="theme-toggle-button" title="{tooltip}"
                    onclick="window.parent.document.querySelector('[data-testid=\"stButton\"][key=\"theme_toggle_callback\"]').click();">
                {icon}
            </button>
        </div>
    """, unsafe_allow_html=True)

def help_button():
    """H√†m t·∫°o n√∫t "?" c·ªë ƒë·ªãnh ·ªü g√≥c d∆∞·ªõi b√™n ph·∫£i ƒë·ªÉ xem l·∫°i h∆∞·ªõng d·∫´n."""
    # N√∫t ·∫©n c·ªßa Streamlit ƒë·ªÉ k√≠ch ho·∫°t l·∫°i popup
    if st.button("Show Onboarding", key="show-onboarding-button"):
        # ƒê·∫∑t c·ªù ƒë·ªÉ b√°o hi·ªáu cho app.py r·∫±ng c·∫ßn hi·ªÉn th·ªã popup
        st.session_state.onboarding_status = 'showing'
        st.rerun()

    # N√∫t b·∫•m th·∫≠t m√† ng∆∞·ªùi d√πng nh√¨n th·∫•y
    st.markdown("""
        <style>
            .help-button-container {{ position: fixed; bottom: 20px; right: 20px; z-index: 9999; }}
            .help-button {{
                background-color: var(--primary-color); color: white; border: none; border-radius: 50%;
                width: 50px; height: 50px; font-size: 24px; font-weight: bold; cursor: pointer;
                box-shadow: 0 4px 12px rgba(0,0,0,0.4); transition: transform 0.2s ease;
            }}
            .help-button:hover {{ transform: scale(1.1); }}
        </style>
        <div class="help-button-container">
            <button class="help-button" onclick="window.parent.document.querySelector('[data-testid=\"stButton\"][key=\"show-onboarding-button\"]').click();">?</button>
        </div>
    """, unsafe_allow_html=True)


def page_setup(page_title: str, page_icon: str, initial_sidebar_state: str = "expanded"):
    """
    H√†m thi·∫øt l·∫≠p trang to√†n di·ªán, ƒë∆∞·ª£c g·ªçi ·ªü ƒë·∫ßu m·ªói file trang.
    ƒê√¢y l√† phi√™n b·∫£n ƒë√£ ƒë∆∞·ª£c s·ª≠a l·ªói "timing" c·ªßa st.dialog.
    """
    st.set_page_config(
        page_title=page_title,
        page_icon=page_icon,
        layout="wide",
        initial_sidebar_state=initial_sidebar_state
    )

    # √Åp d·ª•ng theme v√† CSS t√πy ch·ªânh v√†o trang
    apply_theme()
    with open("styles.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

    # --- S·ª¨A L·ªñI: Logic kh·ªüi t·∫°o state 2 b∆∞·ªõc cho onboarding ---
    # Kh·ªüi t·∫°o c√°c state c·ªët l√µi n·∫øu ch√∫ng ch∆∞a t·ªìn t·∫°i
    if "courses" not in st.session_state:
        st.session_state.courses = service_manager.list_courses()
    
    # State n√†y qu·∫£n l√Ω lu·ªìng hi·ªÉn th·ªã popup h∆∞·ªõng d·∫´n
    if "onboarding_status" not in st.session_state:
        # L·∫ßn ƒë·∫ßu ti√™n ng∆∞·ªùi d√πng truy c·∫≠p, ƒë·∫∑t tr·∫°ng th√°i l√† 'needed'.
        # 'needed' c√≥ nghƒ©a l√†: "c·∫ßn hi·ªÉn th·ªã, nh∆∞ng ch∆∞a ph·∫£i b√¢y gi·ªù".
        st.session_state.onboarding_status = 'needed'
    
    # Hi·ªÉn th·ªã c√°c n√∫t c·ªë ƒë·ªãnh tr√™n giao di·ªán.
    help_button()
    theme_toggle_button()
