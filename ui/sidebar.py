# ui/sidebar.py

# Ghi ch√∫: File n√†y ch·ªãu tr√°ch nhi·ªám v·∫Ω to√†n b·ªô thanh b√™n tr√°i (sidebar)
# trong kh√¥ng gian l√†m vi·ªác. N√≥ bao g·ªìm c√°c ch·ª©c nƒÉng ch√≠nh:
# 1. Th√™m t√†i li·ªáu t·ª´ nhi·ªÅu ngu·ªìn (file, URL, text).
# 2. Li·ªát k√™ v√† qu·∫£n l√Ω c√°c t√†i li·ªáu ƒë√£ th√™m.
# 3. Cung c·∫•p c√°c c√¥ng c·ª• AI (T√≥m t·∫Øt, T·∫°o Quiz).
# 4. Cho ph√©p c·∫•u h√¨nh v√† th·ª±c hi·ªán c√°c h√†nh ƒë·ªông nguy hi·ªÉm (x√≥a kh√≥a h·ªçc).
# File n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t√°ch bi·ªát logic giao di·ªán kh·ªèi logic nghi·ªáp v·ª• (core/services.py).

import streamlit as st
import time
import os
import uuid
from core.services import service_manager, slugify, calculate_file_hash
from config import USER_DATA_PATH, AVAILABLE_MODELS, MAX_FILE_SIZE_MB

# --- C√ÅC H√ÄM TI·ªÜN √çCH C·ª§C B·ªò ---

MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024

def display_sidebar():
    """
    H√†m ch√≠nh ƒë·ªÉ v·∫Ω to√†n b·ªô n·ªôi dung c·ªßa sidebar.
    S·ª≠ d·ª•ng session_state ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i giao di·ªán, v√≠ d·ª• nh∆∞
    kh√≥a c√°c n√∫t b·∫•m khi m·ªôt h√†nh ƒë·ªông n·∫∑ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.
    """
    with st.sidebar:
        # Kh·ªüi t·∫°o c·ªù kh√≥a (lock) ƒë·ªÉ ngƒÉn ng∆∞·ªùi d√πng th·ª±c hi·ªán nhi·ªÅu h√†nh ƒë·ªông c√πng l√∫c.
        if 'processing_lock' not in st.session_state:
            st.session_state.processing_lock = False
        
        # --- Ph·∫ßn Logo v√† Ti√™u ƒë·ªÅ ---
        st.markdown("""<div class="logo-box"><span class="logo-text">P</span></div>""", unsafe_allow_html=True)
        st.title("PNote Workspace")
        st.caption(f"Kh√≥a h·ªçc: **{st.session_state.get('current_course_name', 'N/A')}**")
        st.markdown("---")

        # --- Giao di·ªán Tabs ƒë·ªÉ ph√¢n chia ch·ª©c nƒÉng ---
        manage_tab, toolkit_tab, config_tab = st.tabs(["üóÇÔ∏è Qu·∫£n L√Ω", "üõ†Ô∏è AI Toolkit", "‚öôÔ∏è C·∫•u H√¨nh"])

        # --- Tab 1: Qu·∫£n l√Ω T√†i li·ªáu ---
        with manage_tab:
            handle_document_management()

        # --- Tab 2: C√°c c√¥ng c·ª• AI ---
        with toolkit_tab:
            handle_ai_toolkit()
        
        # --- Tab 3: C·∫•u h√¨nh v√† T√πy ch·ªçn N√¢ng cao ---
        with config_tab:
            handle_configuration()

        # --- N√∫t ƒëi·ªÅu h∆∞·ªõng chung ---
        st.markdown("<hr style='margin: 1rem 0;'>", unsafe_allow_html=True)
        if st.button("‚¨ÖÔ∏è Tr·ªü v·ªÅ Dashboard", use_container_width=True):
            st.switch_page("app.py")

    # --- X·ª≠ l√Ω c√°c h√†nh ƒë·ªông ƒë∆∞·ª£c k√≠ch ho·∫°t t·ª´ giao di·ªán ---
    # Ghi ch√∫: Logic x·ª≠ l√Ω c√°c h√†nh ƒë·ªông (nh∆∞ upload, x√≥a) ƒë∆∞·ª£c ƒë·∫∑t b√™n ngo√†i
    # kh·ªëi `with st.sidebar` ƒë·ªÉ gi·ªØ cho code giao di·ªán s·∫°ch s·∫Ω v√† d·ªÖ ƒë·ªçc.
    if st.session_state.get('start_processing_sources'):
        process_all_sources(st.session_state.pop('sources_to_process'))
        st.session_state.processing_lock = False
        st.rerun()
    if st.session_state.get('doc_to_delete'):
        confirm_delete_document(st.session_state.pop('doc_to_delete'))
    if st.session_state.get('course_to_delete'):
        confirm_delete_course(st.session_state.pop('course_to_delete'))


def handle_document_management():
    """V·∫Ω c√°c th√†nh ph·∫ßn giao di·ªán cho vi·ªác qu·∫£n l√Ω t√†i li·ªáu."""
    with st.expander("‚ûï Th√™m t√†i li·ªáu m·ªõi"):
        # V√¥ hi·ªáu h√≥a c√°c √¥ nh·∫≠p li·ªáu khi ƒëang x·ª≠ l√Ω ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n.
        disabled = st.session_state.processing_lock
        
        uploaded_files = st.file_uploader("1. T·∫£i file (PDF, DOCX)", type=["pdf", "docx"], accept_multiple_files=True, disabled=disabled)
        url_input = st.text_input("2. Nh·∫≠p URL (b√†i b√°o, YouTube)", placeholder="https://...", disabled=disabled)
        pasted_text = st.text_area("3. D√°n vƒÉn b·∫£n v√†o ƒë√¢y", placeholder="D√°n n·ªôi dung t·ª´ clipboard...", disabled=disabled)
        
        # N√∫t "X·ª≠ l√Ω" s·∫Ω k√≠ch ho·∫°t lu·ªìng x·ª≠ l√Ω d·ªØ li·ªáu.
        if st.button("X·ª≠ l√Ω v√† Th√™m", use_container_width=True, type="secondary", disabled=disabled):
            sources = []
            if uploaded_files: sources.extend([("file", f) for f in uploaded_files])
            if url_input: sources.append(("url", url_input))
            if pasted_text: sources.append(("text", pasted_text))
            
            if not sources:
                st.warning("Vui l√≤ng cung c·∫•p √≠t nh·∫•t m·ªôt ngu·ªìn t√†i li·ªáu.")
            else:
                # ƒê·∫∑t c·ªù ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω v√† l∆∞u tr·ªØ ngu·ªìn d·ªØ li·ªáu
                st.session_state.processing_lock = True
                st.session_state.sources_to_process = sources
                st.rerun()

    st.subheader("T√†i li·ªáu ƒë√£ th√™m")
    docs = service_manager.list_documents_in_course(st.session_state.current_course_id)
    if not docs:
        st.info("Ch∆∞a c√≥ t√†i li·ªáu n√†o trong kh√≥a h·ªçc n√†y.")
    else:
        # Hi·ªÉn th·ªã danh s√°ch t√†i li·ªáu v√† n√∫t x√≥a cho t·ª´ng t√†i li·ªáu.
        for doc in docs:
            col1, col2 = st.columns([4, 1])
            with col1:
                st.markdown(f"<div class='doc-item' title='{doc['name']}'>{doc['name']}</div>", unsafe_allow_html=True)
            with col2:
                if st.button("üóëÔ∏è", key=f"del_doc_{doc['hash']}", help="X√≥a t√†i li·ªáu n√†y", disabled=st.session_state.processing_lock):
                    st.session_state.doc_to_delete = doc
                    st.rerun()

def handle_ai_toolkit():
    """V·∫Ω c√°c th√†nh ph·∫ßn giao di·ªán cho c√°c c√¥ng c·ª• AI."""
    course_id = st.session_state.current_course_id
    model_name_display = st.session_state.get(f"model_{course_id}", list(AVAILABLE_MODELS.keys())[0])
    model_name_value = AVAILABLE_MODELS[model_name_display]
    disabled = st.session_state.processing_lock

    with st.expander("üìÑ T√≥m t·∫Øt Kh√≥a h·ªçc"):
        if st.button("T·∫°o T√≥m T·∫Øt", use_container_width=True, key="summarize_btn", disabled=disabled):
            with st.spinner("AI ƒëang ƒë·ªçc v√† t√≥m t·∫Øt to√†n b·ªô t√†i li·ªáu..."):
                st.session_state[f"summary_{course_id}"] = service_manager.summarize_course(course_id, model_name_value)
        if f"summary_{course_id}" in st.session_state:
            st.text_area("B·∫£n t√≥m t·∫Øt:", value=st.session_state[f"summary_{course_id}"], height=250, disabled=True)

    with st.expander("‚ùì T·∫°o C√¢u H·ªèi √în T·∫≠p"):
        num_questions = st.slider("S·ªë l∆∞·ª£ng c√¢u h·ªèi:", 3, 10, 5, key="quiz_slider", disabled=disabled)
        if st.button("B·∫Øt ƒë·∫ßu T·∫°o Quiz", use_container_width=True, key="quiz_btn", disabled=disabled):
             with st.spinner("AI ƒëang so·∫°n c√¢u h·ªèi cho b·∫°n..."):
                st.session_state[f"quiz_{course_id}"] = service_manager.generate_quiz(course_id, model_name_value, num_questions)
        if f"quiz_{course_id}" in st.session_state:
            result = st.session_state[f"quiz_{course_id}"]
            if isinstance(result, list):
                # Hi·ªÉn th·ªã quiz ngay trong sidebar
                for i, q in enumerate(result):
                    st.write(f"**C√¢u {i+1}:** {q.get('question', 'N/A')}")
                    # ... (logic hi·ªÉn th·ªã radio v√† ƒë√°p √°n) ...
            else:
                st.error(str(result))


def handle_configuration():
    """V·∫Ω c√°c th√†nh ph·∫ßn giao di·ªán cho c·∫•u h√¨nh v√† c√°c h√†nh ƒë·ªông nguy hi·ªÉm."""
    st.subheader("T√πy ch·ªânh AI")
    course_id = st.session_state.current_course_id
    model_key = f"model_{course_id}"
    current_model_display = st.session_state.get(model_key, list(AVAILABLE_MODELS.keys())[0])
    st.session_state[model_key] = st.selectbox(
        "Ch·ªçn m√¥ h√¨nh AI:", options=AVAILABLE_MODELS.keys(),
        index=list(AVAILABLE_MODELS.keys()).index(current_model_display),
        disabled=st.session_state.processing_lock
    )
    
    with st.expander("‚ö†Ô∏è T√πy ch·ªçn N√¢ng cao"):
        st.warning("H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!")
        if st.button("X√≥a Kh√≥a H·ªçc N√†y", use_container_width=True, type="primary", disabled=st.session_state.processing_lock):
            st.session_state.course_to_delete = course_id
            st.rerun()

def process_all_sources(sources):
    """
    H√†m x·ª≠ l√Ω m·ªôt danh s√°ch c√°c ngu·ªìn t√†i li·ªáu (file, url, text).
    ƒê√¢y l√† m·ªôt h√†m n·∫∑ng, s·∫Ω hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh.
    """
    course_id = st.session_state.current_course_id
    course_data_path = os.path.join(USER_DATA_PATH, course_id)
    total_sources = len(sources)
    success_count = 0
    progress_bar = st.progress(0, f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {total_sources} ngu·ªìn...")

    for i, (source_type, data) in enumerate(sources):
        progress_text = "ƒêang x·ª≠ l√Ω..."
        source_name_for_hash = ""
        content_bytes = b""
        
        # --- B∆∞·ªõc 1: Chu·∫©n b·ªã d·ªØ li·ªáu v√† t√≠nh hash ---
        if source_type == "file":
            progress_text = f"X·ª≠ l√Ω file: {data.name}"
            if data.size > MAX_FILE_SIZE_BYTES:
                st.warning(f"B·ªè qua '{data.name}': k√≠ch th∆∞·ªõc (> {MAX_FILE_SIZE_MB}MB) qu√° l·ªõn.")
                continue
            content_bytes = data.getvalue()
        elif source_type == "url":
            progress_text = f"X·ª≠ l√Ω URL: {data[:50]}..."
            content_bytes = data.encode('utf-8')
        elif source_type == "text":
            progress_text = f"X·ª≠ l√Ω vƒÉn b·∫£n d√°n v√†o..."
            content_bytes = data.encode('utf-8')
        
        progress_bar.progress((i + 1) / total_sources, progress_text)
        file_hash = calculate_file_hash(content_bytes)
        
        # --- B∆∞·ªõc 2: Ki·ªÉm tra tr√πng l·∫∑p ---
        if service_manager.check_if_hash_exists(course_id, file_hash):
            st.toast(f"B·ªè qua: Ngu·ªìn n√†y ƒë√£ t·ªìn t·∫°i.", icon="‚ôªÔ∏è")
            continue

        # --- B∆∞·ªõc 3: Tr√≠ch xu·∫•t vƒÉn b·∫£n ---
        # ƒê·ªëi v·ªõi file, c·∫ßn ƒë∆∞a con tr·ªè v·ªÅ ƒë·∫ßu tr∆∞·ªõc khi ƒë·ªçc l·∫°i
        if source_type == "file": data.seek(0)
        
        # X√°c ƒë·ªãnh ƒë√∫ng lo·∫°i ƒë·ªÉ truy·ªÅn v√†o service
        doc_type_for_extraction = data.name.split('.')[-1] if source_type == "file" else source_type
        text, original_name, _ = service_manager.extract_text_from_source(doc_type_for_extraction, data)

        if not text:
            st.error(f"L·ªói: Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ '{original_name}'.", icon="‚ö†Ô∏è")
            continue

        # --- B∆∞·ªõc 4: L∆∞u tr·ªØ (n·∫øu l√† file) v√† th√™m v√†o DB ---
        final_source_name = original_name
        if source_type == "file":
            unique_id = uuid.uuid4().hex[:6]
            final_source_name = f"{slugify(os.path.splitext(original_name)[0])}_{unique_id}{os.path.splitext(original_name)[1]}"
            with open(os.path.join(course_data_path, final_source_name), "wb") as f:
                f.write(content_bytes)
        
        service_manager.add_document_to_course(course_id, text, final_source_name, file_hash)
        success_count += 1

    progress_bar.empty()
    if success_count > 0:
        st.success(f"Ho√†n t·∫•t! ƒê√£ th√™m th√†nh c√¥ng {success_count}/{total_sources} ngu·ªìn t√†i li·ªáu m·ªõi.")
    else:
        st.info("Kh√¥ng c√≥ t√†i li·ªáu m·ªõi n√†o ƒë∆∞·ª£c th√™m.")
    time.sleep(2)


def confirm_delete_document(doc_to_delete):
    """Hi·ªÉn th·ªã dialog x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a m·ªôt t√†i li·ªáu."""
    @st.dialog("X√°c nh·∫≠n x√≥a t√†i li·ªáu")
    def do_delete():
        st.write(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a vƒ©nh vi·ªÖn t√†i li·ªáu **'{doc_to_delete['name']}'** kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.")
        col1, col2 = st.columns(2)
        if col1.button("H·ªßy b·ªè", use_container_width=True): st.rerun()
        if col2.button("X√≥a ngay", type="primary", use_container_width=True):
            try:
                service_manager.delete_document_from_course(st.session_state.current_course_id, doc_to_delete['hash'])
                st.toast("ƒê√£ x√≥a t√†i li·ªáu!", icon="‚úÖ"); time.sleep(1); st.rerun()
            except Exception as e: st.error(f"L·ªói khi x√≥a: {e}")
    do_delete()


def confirm_delete_course(course_id):
    """Hi·ªÉn th·ªã dialog x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a to√†n b·ªô kh√≥a h·ªçc."""
    @st.dialog("X√°c nh·∫≠n x√≥a TO√ÄN B·ªò kh√≥a h·ªçc")
    def do_delete():
        st.write(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a vƒ©nh vi·ªÖn kh√≥a h·ªçc n√†y v√† t·∫•t c·∫£ t√†i li·ªáu b√™n trong kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.")
        col1, col2 = st.columns(2)
        if col1.button("H·ªßy b·ªè", use_container_width=True): st.rerun()
        if col2.button("T√¥i hi·ªÉu, X√≥a Ngay", type="primary", use_container_width=True):
            try:
                service_manager.delete_course(course_id)
                st.session_state.clear(); st.success("ƒê√£ x√≥a kh√≥a h·ªçc th√†nh c√¥ng!"); time.sleep(1); st.switch_page("app.py")
            except Exception as e: st.error(f"L·ªói khi x√≥a: {e}")
    do_delete()
